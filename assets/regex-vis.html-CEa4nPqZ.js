import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as a,a as r,e as n,f as s,o as l}from"./app-DB5Ixhye.js";const o={};function d(h,e){return l(),t("div",null,[e[0]||(e[0]=a("h1",{id:"看不懂正则表达式-试试可视化工具吧",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#看不懂正则表达式-试试可视化工具吧"},[a("span",null,"看不懂正则表达式？试试可视化工具吧！")])],-1)),e[1]||(e[1]=a("blockquote",null,[a("p",null,[a("a",{href:"https://zh.wikipedia.org/zh-cn/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},"正则表达式"),s("是一种用来匹配字符串的强有力工具。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串我们就认为它“匹配”了，否则该字符串就是不合法的。")])],-1)),e[2]||(e[2]=a("p",null,"日常开发中常常会使用正则表达式，例如：对数据格式进行校验（判断一个字符串是否是合法的Email格式、合法的IP格式或是否按照特定格式的数字和字母拼接）；又或是将日志详情按照某种格式匹配后采集上报。复杂的正则表达式可读性很差，对地球人来说掌握比较困难，下定决心系统的学习后又会很快的忘记。在有大模型辅助编程前，如果要写一个复杂的正则表达式可能需要花费不少精力搜索资料和验证，有了大模型帮忙确实可以大大简化书写的过程。但不管是之前还是现在，可能对正则表达式执行的正确性仍不太确定（大模型也可能给出错误的结果或者由于描述不准确导致给出不符合预期的结果），这时候如果能对正则表达式可视化的分析，那么将大大增加使用的信心。",-1)),r(" more "),e[3]||(e[3]=n('<h2 id="工具推荐" tabindex="-1"><a class="header-anchor" href="#工具推荐"><span>工具推荐</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p><a href="https://github.com/Bowen7/regex-vis" target="_blank" rel="noopener noreferrer">regex-vis</a>是一个辅助学习、编写和验证正则的工具，输入一个正则表达式后，会生成它的可视化图形。然后可以点选或框选图形中的单个或多个节点，再在右侧操作面板对其进行操作，具体操作取决于节点的类型，比如在其右侧插入空节点、为节点编组、为节点增加量词等。项目开源，可以拉取代码到本地编译执行，也可以直接在<a href="https://regex-vis.com/" target="_blank" rel="noopener noreferrer">regex-vis.com</a>体验它的功能。</p><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251322057.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>通过词法分析和语法分析将一个正则表达式转换为 AST(Abstract Syntax Tree)。其中词法分析将正则字符串转为 Tokens，Tokens 再通过语法分析转为 AST。实现源码参考<a href="https://github.com/Bowen7/regex-vis/tree/master/src/parser" target="_blank" rel="noopener noreferrer">Parser</a>。</p><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251319865.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例</span></a></h3><p>下面列举一些常用的正则表达式和对应的可视化图，点击小标题超链接可以直接跳转到RegexVis页面查看。</p><h4 id="_1-邮箱" tabindex="-1"><a class="header-anchor" href="#_1-邮箱"><span>① <a href="https://regex-vis.com/?r=%5E%5Ba-zA-Z0-9_-%5D%2B%40%5Ba-zA-Z0-9_-%5D%2B%28%5C.%5Ba-zA-Z0-9_-%5D%2B%29%2B%24&amp;e=0" target="_blank" rel="noopener noreferrer">邮箱</a></span></a></h4><p>只允许英文字母、数字、下划线、英文句号、以及中划线组成。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251319181.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-域名" tabindex="-1"><a class="header-anchor" href="#_2-域名"><span>② <a href="https://regex-vis.com/?r=%5E%28%28http%3A%5C%2F%5C%2F%29%7C%28https%3A%5C%2F%5C%2F%29%29%3F%28%5Ba-zA-Z0-9%5D%28%5Ba-zA-Z0-9%5C-%5D%7B0%2C61%7D%5Ba-zA-Z0-9%5D%29%3F%5C.%29%2B%5Ba-zA-Z%5D%7B2%2C6%7D%28%5C%2F%29&amp;e=0" target="_blank" rel="noopener noreferrer">域名</a></span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>^((http:\\/\\/)|(https:\\/\\/))?([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}(\\/)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251320148.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-ip" tabindex="-1"><a class="header-anchor" href="#_3-ip"><span>③ <a href="https://regex-vis.com/?r=%28%28%3F%3A%28%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5Cd%7C%5B01%5D%3F%5Cd%3F%5Cd%29%5C.%29%7B3%7D%28%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5Cd%7C%5B01%5D%3F%5Cd%3F%5Cd%29%29&amp;e=0" target="_blank" rel="noopener noreferrer">IP</a></span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251320467.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-url" tabindex="-1"><a class="header-anchor" href="#_4-url"><span>④ <a href="https://regex-vis.com/?r=%5Ehttps%3F%3A%5C%2F%5C%2F%28www%5C.%29%3F%5B-a-zA-Z0-9%40%3A%25._%5C%2B%7E%23%3D%5D%7B2%2C256%7D%5C.%5Ba-z%5D%7B2%2C6%7D%5Cb%28%5B-a-zA-Z0-9%40%3A%25_%5C%2B.%7E%23%28%29%3F%26%2F%2F%3D%5D*%29%24&amp;e=0" target="_blank" rel="noopener noreferrer">URL</a></span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#()?&amp;//=]*)$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251321241.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-html标签" tabindex="-1"><a class="header-anchor" href="#_5-html标签"><span>⑤ <a href="https://regex-vis.com/?r=%5E%3C%28%5Ba-z%5D%2B%29%28%5B%5E%3C%5D%2B%29*%28%3F%3A%3E%28.*%29%3C%5C%2F%5C1%3E%7C%5Cs%2B%5C%2F%3E%29%24&amp;e=0" target="_blank" rel="noopener noreferrer">HTML标签</a></span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\\/\\1&gt;|\\s+\\/&gt;)$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251321250.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ul><li><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener noreferrer">正则表达式30分钟入门教程</a></li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference?redirectedfrom=MSDN" target="_blank" rel="noopener noreferrer">正则表达式语言 - 快速参考</a></li><li><a href="https://github.com/cdoco/common-regex" target="_blank" rel="noopener noreferrer">常用正则表达式</a></li><li><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener noreferrer">正则表达式手册</a></li></ul><div style="text-align:center;"> —— 完 —— </div><hr><p>关注“<strong>肖恩聊技术</strong>”公众号，原创技术文章第一时间推送~</p><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/20241103221454.png" alt="公众号二维码" width="300">',31))])}const c=i(o,[["render",d]]),m=JSON.parse('{"path":"/blogs/code-visualization/regex-vis.html","title":"看不懂正则表达式？试试可视化工具吧！","lang":"zh-CN","frontmatter":{"icon":"en-to-square","date":"2024-05-21T00:00:00.000Z","category":["代码可视化","技术提效"],"tag":["可视化","正则表达式","语法分析"],"description":"正则表达式是一种用来匹配字符串的强有力工具。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串我们就认为它“匹配”了，否则该字符串就是不合法的。 日常开发中常常会使用正则表达式，例如：对数据格式进行校验（判断一个字符串是否是合法的Email格式、合法的IP格式或是否按照特定格式的数字和字母拼接）；又或是将日志详情按照某种格式匹...","head":[["meta",{"property":"og:url","content":"https://shawnxie.top/blogs/code-visualization/regex-vis.html"}],["meta",{"property":"og:site_name","content":"肖恩聊技术"}],["meta",{"property":"og:title","content":"看不懂正则表达式？试试可视化工具吧！"}],["meta",{"property":"og:description","content":"正则表达式是一种用来匹配字符串的强有力工具。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串我们就认为它“匹配”了，否则该字符串就是不合法的。 日常开发中常常会使用正则表达式，例如：对数据格式进行校验（判断一个字符串是否是合法的Email格式、合法的IP格式或是否按照特定格式的数字和字母拼接）；又或是将日志详情按照某种格式匹..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251322057.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-10T09:50:29.000Z"}],["meta",{"property":"article:tag","content":"可视化"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:tag","content":"语法分析"}],["meta",{"property":"article:published_time","content":"2024-05-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-10T09:50:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"看不懂正则表达式？试试可视化工具吧！\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251322057.gif\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251319865.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251319181.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251320148.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251320467.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251321241.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202501251321250.png\\"],\\"datePublished\\":\\"2024-05-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-10T09:50:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ShawnXie\\",\\"url\\":\\"https://shawnxie.top\\"}]}"]]},"headers":[{"level":2,"title":"工具推荐","slug":"工具推荐","link":"#工具推荐","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"举例","slug":"举例","link":"#举例","children":[]}]},{"level":2,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]}],"git":{"createdTime":1746870629000,"updatedTime":1746870629000,"contributors":[{"name":"Shawn Xie","username":"Shawn Xie","email":"xiexiao064@gmail.com","commits":1,"url":"https://github.com/Shawn Xie"}]},"readingTime":{"minutes":3.93,"words":1179},"filePathRelative":"blogs/code-visualization/regex-vis.md","localizedDate":"2024年5月21日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://zh.wikipedia.org/zh-cn/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">正则表达式</a>是一种用来匹配字符串的强有力工具。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串我们就认为它“匹配”了，否则该字符串就是不合法的。</p>\\n</blockquote>\\n<p>日常开发中常常会使用正则表达式，例如：对数据格式进行校验（判断一个字符串是否是合法的Email格式、合法的IP格式或是否按照特定格式的数字和字母拼接）；又或是将日志详情按照某种格式匹配后采集上报。复杂的正则表达式可读性很差，对地球人来说掌握比较困难，下定决心系统的学习后又会很快的忘记。在有大模型辅助编程前，如果要写一个复杂的正则表达式可能需要花费不少精力搜索资料和验证，有了大模型帮忙确实可以大大简化书写的过程。但不管是之前还是现在，可能对正则表达式执行的正确性仍不太确定（大模型也可能给出错误的结果或者由于描述不准确导致给出不符合预期的结果），这时候如果能对正则表达式可视化的分析，那么将大大增加使用的信心。</p>\\n","autoDesc":true}');export{c as comp,m as data};
