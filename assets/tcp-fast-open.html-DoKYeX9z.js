import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e,a as n,o as t}from"./app-CPjHyBDD.js";const l={};function r(h,i){return t(),s("div",null,[i[0]||(i[0]=e('<h1 id="【知识点-】tcp-fast-open" tabindex="-1"><a class="header-anchor" href="#【知识点-】tcp-fast-open"><span>【知识点++】TCP Fast Open</span></a></h1><blockquote><p>“<strong>知识点++</strong>”主题专注于记录日常学习中有意思的知识点，并用一篇文章阐述清楚，选题可能是某个概念、工具、原理、应用等。</p></blockquote><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>面试中问到 TCP 相关知识时一般会问到三次握手和四次挥手，内容大家一定回答过很多次并熟记于心了。传统的 TCP 建立连接时需要三次握手，并且握手时只发送简单的 SYN 和 ACK 报文（部分优化的网络协议栈可以在第三次握手时直接发送数据）。</p><p>从网络带宽的资源利用的角度来看，传输层的 TCP 头部 + 网络层的 IP 头部，最少有 40 个字节，为了发送几个字节的报文数据包，而额外组装了 40 个字节的头部，着实有点浪费资源。</p><p>从应用优化的角度来看，因为要等到 TCP 经过三次握手建立连接之后才能发送应用层数据，所以会造成应用程序首次发送数据时存在一定的延迟，尤其是短连接、移动设备等场景中，这种副作用会加剧。</p><p>为解决上述问题，<strong>TCP Fast Open</strong> 应运而生。</p>',7)),n(" more "),i[1]||(i[1]=e(`<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>TFO <a href="https://conferences.sigcomm.org/co-next/2011/papers/1569470463.pdf" target="_blank" rel="noopener noreferrer">提案</a>最初于2011年提出，并于2014年12月作为实验性 <a href="https://datatracker.ietf.org/doc/html/rfc7413" target="_blank" rel="noopener noreferrer">RFC 7413</a>发布。作为 TCP 协议的扩展，TFO 可以在 TCP 连接建立时就发送数据，而不需要等待 SYN 报文的确认。这大大提高 TCP 连接的建立速度，减少延迟。其核心原理是在发送方和接收方通信中引入 Cookie 机制，这样使发送方在后续重连接收方时能够得到简化。</p><p>由此可见，TFO 在双方首次连接时相比传统连接并没有优势，重点在于提升后续连接建立的效率。其工作分两个阶段：</p><h3 id="首次连接请求" tabindex="-1"><a class="header-anchor" href="#首次连接请求"><span>首次连接请求</span></a></h3><ul><li>客户端发送一个 SYN 包，头部包含 Fast Open 选项，且该选项的Cookie 为空，这表明客户端请求 Fast Open Cookie</li><li>服务端收取 SYN 包以后，生成一个 cookie 值（一串字符串）</li><li>服务端发送 SYN + ACK 包，在 Options 的 Fast Open 选项中设置 cookie 的值</li><li>客户端缓存服务端的 IP 和收到的 cookie 值</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857971.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="后续连接建立" tabindex="-1"><a class="header-anchor" href="#后续连接建立"><span>后续连接建立</span></a></h3><ul><li>当发送方再次连接同一个接收方时，可以在 SYN 报文中携带上次保存的 TFO Cookie，同时在 SYN 报文中附带应用层数据 (第一次握手时就直接发送数据)</li><li>接收方验证发送方的 TFO Cookie 后，将数据发送给应用层处理，并返回 SYN-ACK 报文 (同时也可以发送数据)</li><li>发送方收到 SYN-ACK 报文后，发送 ACK 报文给接收方，完成三次握手</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857973.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h4><ul><li><strong>降低连接延迟</strong>：通过在首次连接时获取Cookie，后续连接可以在第一次握手时就发送数据，跳过了一个RTT的延迟，能够显著提高连接建立的速度。对于频繁建立连接的应用场景，如网页浏览、在线游戏等，性能提升效果明显。</li><li><strong>减轻服务器负担</strong>：在某些情况下，例如突发的大量连接请求，TFO可以减少服务器在连接建立阶段的处理负担，因为部分数据可以在早期就开始传输，而不需要等待三次握手完全完成。</li></ul><h4 id="劣势" tabindex="-1"><a class="header-anchor" href="#劣势"><span>劣势</span></a></h4><ul><li><strong>中间设备的影响</strong>：防火墙、负载均衡器等中间设备可能会影响TCP Fast Open的使用，导致连接回退到传统的三次握手方式。</li><li><strong>安全性</strong>：由于TCP Fast Open允许在连接建立时发送数据，可能会带来一些安全风险，如放大攻击等。因此，需要在使用时进行适当的安全配置。</li><li><strong>数据量限制</strong>：IPv4中，与SYN报文一起发送的数据量有一定限制，通常为1460字节。如果数据量过大，可能不适合使用TFO。</li><li><strong>应用类型限制</strong>：并非所有的应用都适合使用TCP Fast Open。例如，对于POST等非幂等性的请求，使用TFO可能会带来安全风险，因为在连接尚未完全建立时就发送数据可能会被恶意利用。</li></ul><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h2><h3 id="linux服务端开启tfo" tabindex="-1"><a class="header-anchor" href="#linux服务端开启tfo"><span>Linux服务端开启TFO</span></a></h3><h4 id="确保内核版本支持tfo-3-7及以上" tabindex="-1"><a class="header-anchor" href="#确保内核版本支持tfo-3-7及以上"><span>确保内核版本支持TFO（3.7及以上）</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="查看服务器是否开启-tfo" tabindex="-1"><a class="header-anchor" href="#查看服务器是否开启-tfo"><span>查看服务器是否开启 TFO</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /proc/sys/net/ipv4/tcp_fastopen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>0 表示禁用，1 表示开启客户端，2 表示开启服务器端 ，3 表示开启TFO客户端和服务器端。</p><h4 id="内核开启-tfo" tabindex="-1"><a class="header-anchor" href="#内核开启-tfo"><span>内核开启 TFO</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/proc/sys/net/ipv4/tcp_fastopen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="应用软件开启-tfo" tabindex="-1"><a class="header-anchor" href="#应用软件开启-tfo"><span>应用软件开启 TFO</span></a></h4><p>使用 Nginx 充当应用，先在服务器上安装。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装Nginx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> epel-release</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修改NG配置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/nginx/nginx.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 nginx 配置 listen 80 fastopen=256，使之支持 TFO。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen 80  fastopen=256;</span></span>
<span class="line"><span>    server_name example.com;</span></span>
<span class="line"><span>    access_log  /var/log/nginx/example.com main;</span></span>
<span class="line"><span>    location /{</span></span>
<span class="line"><span>        default_type text/html;</span></span>
<span class="line"><span>        return 200 &#39;&lt;html&gt;Hello, Nginx&lt;/html&gt;&#39;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证-tfo-效果" tabindex="-1"><a class="header-anchor" href="#验证-tfo-效果"><span>验证 TFO 效果</span></a></h3><h4 id="检查-macos-是否开启客户端-tfo" tabindex="-1"><a class="header-anchor" href="#检查-macos-是否开启客户端-tfo"><span>检查 macOS 是否开启客户端 TFO</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sysctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> net.inet.tcp.fastopen</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>0 表示禁用，1 表示开启客户端，2 表示开启服务器端 ，3 表示开启TFO客户端和服务器端。</p><h4 id="打开-wireshark-抓包" tabindex="-1"><a class="header-anchor" href="#打开-wireshark-抓包"><span>打开 wireshark 抓包</span></a></h4><p>使用 <strong>tcp.options.tfo</strong> 过滤条件，快速筛选出和 TCP Fast Open 有关的 TCP 报文。</p><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857974.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="首次请求" tabindex="-1"><a class="header-anchor" href="#首次请求"><span>首次请求</span></a></h4><p>执行调用（curl 7.49及以后的版本支持 TFO）。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tcp-fastopen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接收方返回 SYN-ACK 报文的同时，附带一个随机生成的名为 TFO Cookie 的标识符给发送方。</p><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857975.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="再次请求" tabindex="-1"><a class="header-anchor" href="#再次请求"><span>再次请求</span></a></h4><p>再次调用会携带Cookie简化握手流程，第一次握手时就可以直接发送数据。</p><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857976.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>HTTP/3 通过 QUIC 协议提供了类似 TFO 的快速连接建立功能，且设计更为先进，能够直接在首次握手时发送数据，并解决了TCP的队头阻塞问题。等 HTTP/3 推广开来，TFO 也将成为时代的眼泪了。</p><p>当前主流的网站已开始陆续支持HTTP/3，可以在 Chrome 浏览器打开开发者工具（F12），在 Network 面板中查看协议使用情况。</p><figure><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857978.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h2><ul><li><a href="https://zh.wikipedia.org/wiki/TCP%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80" target="_blank" rel="noopener noreferrer">TCP 快速打开</a></li><li><a href="https://dbwu.tech/posts/network/what-is-tcp-fast-open/" target="_blank" rel="noopener noreferrer">TCP Fast Open</a></li><li><a href="https://lwn.net/Articles/814522/" target="_blank" rel="noopener noreferrer">A QUIC look at HTTP/3</a></li><li><a href="https://www.inlighting.org/archives/understand-tcp" target="_blank" rel="noopener noreferrer">理解TCP</a></li></ul><div style="text-align:center;"> —— 完 —— </div><hr><p>关注“<strong>肖恩聊技术</strong>”公众号，原创技术文章第一时间推送~</p><img src="https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/20241103221454.png" alt="公众号二维码" width="300">`,53))])}const o=a(l,[["render",r]]),c=JSON.parse('{"path":"/blogs/notes/tcp-fast-open.html","title":"【知识点++】TCP Fast Open","lang":"zh-CN","frontmatter":{"icon":"en-to-square","date":"2025-02-10T00:00:00.000Z","category":["知识点++","学习随笔"],"tag":["网络","TCP"],"description":"“知识点++”主题专注于记录日常学习中有意思的知识点，并用一篇文章阐述清楚，选题可能是某个概念、工具、原理、应用等。 前言 面试中问到 TCP 相关知识时一般会问到三次握手和四次挥手，内容大家一定回答过很多次并熟记于心了。传统的 TCP 建立连接时需要三次握手，并且握手时只发送简单的 SYN 和 ACK 报文（部分优化的网络协议栈可以在第三次握手时直接...","head":[["meta",{"property":"og:url","content":"https://shawnxie.top/blogs/notes/tcp-fast-open.html"}],["meta",{"property":"og:site_name","content":"肖恩聊技术"}],["meta",{"property":"og:title","content":"【知识点++】TCP Fast Open"}],["meta",{"property":"og:description","content":"“知识点++”主题专注于记录日常学习中有意思的知识点，并用一篇文章阐述清楚，选题可能是某个概念、工具、原理、应用等。 前言 面试中问到 TCP 相关知识时一般会问到三次握手和四次挥手，内容大家一定回答过很多次并熟记于心了。传统的 TCP 建立连接时需要三次握手，并且握手时只发送简单的 SYN 和 ACK 报文（部分优化的网络协议栈可以在第三次握手时直接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857971.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-10T13:54:57.000Z"}],["meta",{"property":"article:tag","content":"网络"}],["meta",{"property":"article:tag","content":"TCP"}],["meta",{"property":"article:published_time","content":"2025-02-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-10T13:54:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【知识点++】TCP Fast Open\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857971.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857973.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857974.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857975.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857976.png\\",\\"https://cdn.jsdelivr.net/gh/Xiaoxie1994/images/images/202502101857978.png\\"],\\"datePublished\\":\\"2025-02-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-10T13:54:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ShawnXie\\",\\"url\\":\\"https://shawnxie.top\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"首次连接请求","slug":"首次连接请求","link":"#首次连接请求","children":[]},{"level":3,"title":"后续连接建立","slug":"后续连接建立","link":"#后续连接建立","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"Linux服务端开启TFO","slug":"linux服务端开启tfo","link":"#linux服务端开启tfo","children":[]},{"level":3,"title":"验证 TFO 效果","slug":"验证-tfo-效果","link":"#验证-tfo-效果","children":[]}]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]},{"level":2,"title":"拓展阅读","slug":"拓展阅读","link":"#拓展阅读","children":[]}],"git":{"createdTime":1746885297000,"updatedTime":1746885297000,"contributors":[{"name":"Shawn Xie","username":"Shawn Xie","email":"xiexiao064@gmail.com","commits":1,"url":"https://github.com/Shawn Xie"}]},"readingTime":{"minutes":5.59,"words":1677},"filePathRelative":"blogs/notes/tcp-fast-open.md","localizedDate":"2025年2月10日","excerpt":"\\n<blockquote>\\n<p>“<strong>知识点++</strong>”主题专注于记录日常学习中有意思的知识点，并用一篇文章阐述清楚，选题可能是某个概念、工具、原理、应用等。</p>\\n</blockquote>\\n<h2>前言</h2>\\n<p>面试中问到 TCP 相关知识时一般会问到三次握手和四次挥手，内容大家一定回答过很多次并熟记于心了。传统的 TCP 建立连接时需要三次握手，并且握手时只发送简单的 SYN 和 ACK 报文（部分优化的网络协议栈可以在第三次握手时直接发送数据）。</p>\\n<p>从网络带宽的资源利用的角度来看，传输层的 TCP 头部 + 网络层的 IP 头部，最少有 40 个字节，为了发送几个字节的报文数据包，而额外组装了 40 个字节的头部，着实有点浪费资源。</p>\\n<p>从应用优化的角度来看，因为要等到 TCP 经过三次握手建立连接之后才能发送应用层数据，所以会造成应用程序首次发送数据时存在一定的延迟，尤其是短连接、移动设备等场景中，这种副作用会加剧。</p>\\n<p>为解决上述问题，<strong>TCP Fast Open</strong> 应运而生。</p>\\n","autoDesc":true}');export{o as comp,c as data};
